
++++++++++++++++++++++++++++++++++

JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact
and self-contained way for securely transmitting
information between parties as a JSON object. This information can be
verified and trusted because it is digitally signed. JWTs can be signed using
a secret (with the HMAC algorithm) or a public/private key pair using RSA.

JSON Web Token is used to carry information related to the identity and
characteristics (claims) of a client. This "container" is signed by the server
in order to avoid that a client tamper it in order to change, for example,
the identity or any characteristics (example: change the role from simple
user to admin or change the client login). This token is created during
authentication (is provided in case of successful authentication) and is
verified by the server before any processing. It is used by an application
to allow a client to present a token representing his "identity card" (container
with all user information about him) to server and allow the server to verify
the validity and integrity of the token in a secure way, all of this in a stateless
and portable approach (portable in the way that client and server technologies can
be different including also the transport channel even if HTTP is the most often used)

++++++++++++++++++++++++++++++++++


Structure of a JWT token

Letâ€™s take a look at the structure of a JWT token.

The token is base64-url-encoded and consists of three parts header.claims.signature.

Based on the algorithm the signature will be added to the token. 
This way you can verify that someone did not modify the token (one change to the token will invalidate the signature).

You can use the below forms as a simple way to encode and decode JWT tokens. 
Or you can make use of the more extensive options at jwt.io. 
You can revisit this page for the assignments to come and use it as part of your attempts to solve it.

++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++

( JWT, FLOW )

In this flow you can see the user logs in with a username and password on a successful authentication the server returns. 
The server creates a new token and returns this one to the client. 
When the client makes a successive call toward the server it attaches the new token in the "Authorization" header. 
The server reads the token and first validates the signature after a successful verification,
the server uses the information in the token to identify the user.


POST /WebGoat/JWT/votings/Admin%20lost%20password HTTP/1.1
Host: localhost
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: http://localhost/WebGoat/start.mvc
X-Requested-With: XMLHttpRequest
Connection: close
Cookie: access_token=eyJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE2MDA1NjY2MDIsImFkbWluIjoiZmFsc2UiLCJ1c2VyIjoiU3lsdmVzdGVyIn0.vMOeeb33kR3W77mDqFLXDqa0Co6mtPRMHCnLTGkUgBHGN7vhjZxpCoI_cx-Ct4O75BX-vGUPrpa2fzbpVkXnLQ; JSESSIONID=sijkkshs9JIQD3m1d1CCv7aFR_357LIo0XCRZfLJ
Content-Length: 0

