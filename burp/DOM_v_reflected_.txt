
Reflected - You enter data to the application, which is then echoed back without escaping, sanitization or encoding and it's possible to include JavaScript code which is then executed in the context of the application

Stored - You enter data which is stored within the application and then returned later on in response to another request. This data contains JavaScript code which is executed in the context of the application

DOM based - You enter data which modifies the DOM of the web page, this data contains JavaScript which is executed in the context of the application. It's relatively similar to reflected XSS but the difference is that in modifying the DOM the data might not ever got to the server (which changes how it can/should be mitigated as server-side filters might not be effective).

An example would be web applications which make heavy use of client-side JavaScript and which take user data and update the DOM without ever actually sending the data to the server. If you see applications which make instant changes to the page you're viewing when you enter data, it's likely that they're using client-side JavaScript to update the DOM.

In terms of finding them, that's kind of tricky, as the tools to find DOM based XSS aren't as developed as the ones for Reflective or Stored XSS. The only tool which specifically addresses it, which I'm aware of is Dominator. There's also information on the DOM XSS Wiki which could be useful.

Share
Improve this answer

########################################


Simply put, DOM-based XSS can be exploited without the client requesting the server. The attack takes place in the DOM which is local (in the user context).

For a developer to find and correct those, this is complicated as of today no mature technology exist to detect those vulnerabilities. Some programs and scripts are used but this is still very "work in progress", even the mentioned "Dominator" software (which, by the way, is far too expensive for what it does IMO).

########################################


Having referenced Difference between DOM & Reflected XSS , I observed that certain attacks could be both DOM-based and Reflected XSS. I wish to find out if my understand is accurate, or they should be mutually exclusive. I have some examples that I have found to overlap in the two categories:

URL

Reflected: http://example.com/index.php?user=<script>alert(123)</script>

DOM-based: www.mywebsite.com/logon.asp?user=<script>MaliciousFunction(...)</script>

Body

Reflected: <body onload=document.getElementById("xsrf").submit()>

DOM-based: <body onload="go()">

Redirect

Reflected: <A HREF="javascript:document.location='http://www.google.com/'">XSS</A>

DOM-based: document.write('<a href="' + document.location + '?gotoHomepage=1'+ '">Home</a>');

And many other types of various reflected XSS like inserting image tags, iframes, HPP etc. I am aware that for DOM-based xss, there are no round trips to the webserver, and commonly leverage on the "#" in the url to writes this value directly into the webpage.


########################################


