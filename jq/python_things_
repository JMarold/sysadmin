https://stackoverflow.com/questions/17055117/python-json-dump-append-to-txt-with-each-variable-on-new-line

###########
###########

Python JSON dump / append to .txt with each variable on new line
Asked 8 years, 10 months ago
Modified 2 years ago
Viewed 134k times
Report this ad
72
14

My code creates a dictionary, which is then stored in a variable. I want to write each dictionary to a JSON file, but I want each dictionary to be on a new line.

My dictionary:

hostDict = {"key1": "val1", "key2": "val2", "key3": {"sub_key1": "sub_val2", "sub_key2": "sub_val2", "sub_key3": "sub_val3"}, "key4": "val4"}

Part of my code:

g = open('data.txt', 'a')
with g as outfile:
  json.dump(hostDict, outfile)

This appends each dictionary to 'data.txt' but it does so inline. I want each dictionary entry to be on new line. Any advice would be appreciated.
python
json
append
newline
dump
Share
Improve this question
Follow
edited Sep 18, 2019 at 8:12
user avatar
agf
159k3838 gold badges274274 silver badges230230 bronze badges
asked Jun 11, 2013 at 22:48
user avatar
Victor S
72911 gold badge55 silver badges33 bronze badges
Add a comment
2 Answers
Sorted by:
137

Your question is a little unclear. If you're generating hostDict in a loop:

with open('data.txt', 'a') as outfile:
    for hostDict in ....:
        json.dump(hostDict, outfile)
        outfile.write('\n')

If you mean you want each variable within hostDict to be on a new line:

with open('data.txt', 'a') as outfile:
    json.dump(hostDict, outfile, indent=2)

When the indent keyword argument is set it automatically adds newlines.
Share
Improve this answer
Follow
edited Sep 18, 2019 at 8:12
answered Jun 11, 2013 at 22:50
user avatar
agf
159k3838 gold badges274274 silver badges230230 bronze badges

    This did not seem to work for me; the problem disappeared after I stopped using json.dump or json.dumps on empty/nonexistent objects. – 
    Ansa211
    Oct 4, 2019 at 11:16
    'json.dump(hostDict, outfile, indent=2)' this worked for me. thanks – 
    Vineesh TP
    May 11, 2020 at 11:19
    2
    Since you are working with JSON you may want to add a comma separator before the newline character: outfile.write(',\n') – 
    datalifenyc
    Aug 19, 2021 at 15:41

Add a comment
Report this ad
15

To avoid confusion, paraphrasing both question and answer. I am assuming that user who posted this question wanted to save dictionary type object in JSON file format but when the user used json.dump, this method dumped all its content in one line. Instead, he wanted to record each dictionary entry on a new line. To achieve this use:

with g as outfile:
  json.dump(hostDict, outfile,indent=2)

Using indent = 2 helped me to dump each dictionary entry on a new line. Thank you @agf. Rewriting this answer to avoid confusion.
Share
Improve this answer
Follow
edited Mar 17, 2020 at 14:17
answered Dec 9, 2019 at 15:57
user avatar
Sayali Sonawane
11.2k44 gold badges4040 silver badges4646 bronze badges

    This is pretty clearly not what the user is asking about, he's asking about storing multiple dicts in a JSONL format. But it's probably helpful for other people coming to this question. – 
    Boris V
    Jun 12, 2021 at 10:40



#######################################
#######################################



I'm struggling to modify my JSON file. I need to take the following JSON

{"categories": [{"supercategory": "", "id": 0, "name": "Negative", "tiles": 2489, "bboxes": 5527, "className": "Negative"}, {"supercategory": "", "id": 1, "name": "Positive, "tiles": 5227, "bboxes": 15362, "className": "Positive}], "images": [{"id": 224, "file_name": "img1.jpg", "height": 512, "width": 512}, {"id": 225, "file_name": "img2.jpg", "height": 512, "width": 512}], "annotations": [{"id": 716, "image_id": 224, "category_id": 0, "iscrowd": 0, "area": 2856.0, "bbox": [298, 18, 56, 51]}, {"id": 715, "image_id": 224, "category_id": 0, "iscrowd": 0, "area": 4096.0, "bbox": [185, 68, 64, 64]}, {"id": 714, "image_id": 224, "category_id": 0, "iscrowd": 0, "area": 2744.0, "bbox": [354, 10, 56, 49]}, {"id": 717, "image_id": 225, "category_id": 0, "iscrowd": 0, "area": 4096.0, "bbox": [374, 397, 64, 64]}]}
and make this look as following:

[{"image_id":224, "file_name": "img1.jpg", "height": 512, "width": 512, "annotations":[{"bbox":[298.0, 18.0, 56.0, 51.0],"bbox_mode":1,"category_id":"0" }, {"bbox":[185.0, 68.0, 64.0, 64.0],"bbox_mode":1,"category_id":"0" }, {"bbox":[354.0, 10.0, 56.0, 49.0],"bbox_mode":1,"category_id":"0"}]}, {"image_id":225,"file_name":"img2.jpg","height":512,"width":512,"annotations":[{"bbox":[374.0, 397.0, 64.0, 64.0],"bbox_mode":1,"category_id":"0"}]}]
I read the JSON file and loop over the "images" elements, however, I'm stuck in assigning "annotations" for the specific images. As my annotation is in another element my code assigns all the annotation to the first image. I need help to fix this. Here is my code:

json_file = "C:/Temp/python/current_json.json"
elements, element, annotation ={}, {}, {}
listElements, listAnnotations, kk = [], [], []
list = ()


with open(json_file) as f:
    dataset_dicts = json.load(f)
    
    for i in dataset_dicts["images"]:       
        an = []
        for a in dataset_dicts['annotations']:
            element.update(image_id=int(i["id"]), file_name=i["file_name"], height=int(i["height"]), width=int(i["width"]))       
            listElements.append(element.copy())
            annotation.update(bbox=a['bbox'], bbox_mode=1, category_id=a['category_id'])
                
        listAnnotations.append(an.copy())
        
        element["annotations"] = listAnnotations
        kk.append(element)       
    
    elements = [element]

    with open("python/new_json.json", "w") as f:
        f.write(json.dumps(elements))
this code produce the following output:

[{"image_id": 225, "file_name": "img2.jpg", "height": 512, "width": 512, "annotations": [[{"bbox": [298, 18, 56, 51], "bbox_mode": 1, "category_id": 0}, {"bbox": [185, 68, 64, 64], "bbox_mode": 1, "category_id": 0}, {"bbox": [354, 10, 56, 49], "bbox_mode": 1, "category_id": 0}, {"bbox": [374, 397, 64, 64], "bbox_mode": 1, "category_id": 0}], [{"bbox": [298, 18, 56, 51], "bbox_mode": 1, "category_id": 0}, {"bbox": [185, 68, 64, 64], "bbox_mode": 1, "category_id": 0}, {"bbox": [354, 10, 56, 49], "bbox_mode": 1, "category_id": 0}, {"bbox": [374, 397, 64, 64], "bbox_mode": 1, "category_id": 0}]]}]
python
json
Share
Improve this question
Follow
edited Sep 15, 2021 at 7:09
user avatar
CommunityBot
111 silver badge
asked Sep 15, 2021 at 6:43
user avatar
linasster
10977 bronze badges
Add a comment
2 Answers
Sorted by:

Highest score (default)

1

Some errors in your code:

You don't need to re-iterate over the annotations again and again for every item in images, remove it out of the loop
You don't need to update all the keys of element for every item in annotations. Remove it out of the loop.
The usage of all other auxiliary containers such as listElements, listAnnotations, and kk are not needed. You can update the target elements directly if you refactored your code.
With the points above, consider this approach.

First, get all the annotations grouped by image_id
Then, iterate each image. For each image, just get the target annotation from the previous step. Construct the target dictionary and append to the result.
from collections import defaultdict

elements = []
annotation = defaultdict(list)

dataset_dicts = {"categories": [{"supercategory": "", "id": 0, "name": "Negative", "tiles": 2489, "bboxes": 5527, "className": "Negative"}, {"supercategory": "", "id": 1, "name": "Positive", "tiles": 5227, "bboxes": 15362, "className": "Positive"}], "images": [{"id": 224, "file_name": "img1.jpg", "height": 512, "width": 512}, {"id": 225, "file_name": "img2.jpg", "height": 512, "width": 512}], "annotations": [{"id": 716, "image_id": 224, "category_id": 0, "iscrowd": 0, "area": 2856.0, "bbox": [298, 18, 56, 51]}, {"id": 715, "image_id": 224, "category_id": 0, "iscrowd": 0, "area": 4096.0, "bbox": [185, 68, 64, 64]}, {"id": 714, "image_id": 224, "category_id": 0, "iscrowd": 0, "area": 2744.0, "bbox": [354, 10, 56, 49]}, {"id": 717, "image_id": 225, "category_id": 0, "iscrowd": 0, "area": 4096.0, "bbox": [374, 397, 64, 64]}]}

for item in dataset_dicts['annotations']:
    annotation[item["image_id"]].append(
        {
            "bbox": list(map(float, item["bbox"])),  # Or just item["bbox"].copy() if you don't intend it to be float
            "bbox_mode": 1,
            "category_id": str(item["category_id"]),  # Or just item["category_id"] if you don't intend it to be string
        }
    )

for item in dataset_dicts["images"]:
    elements.append(
        {
            "image_id": item["id"],
            "file_name": item["file_name"],
            "height": item["height"],
            "width": item["width"],
            "annotations": annotation[item["id"]],
        }
    )

print(elements)
Output

[
    {
        "image_id": 224,
        "file_name": "img1.jpg",
        "height": 512,
        "width": 512,
        "annotations": [
            {
                "bbox": [
                    298.0,
                    18.0,
                    56.0,
                    51.0
                ],
                "bbox_mode": 1,
                "category_id": "0"
            },
            {
                "bbox": [
                    185.0,
                    68.0,
                    64.0,
                    64.0
                ],
                "bbox_mode": 1,
                "category_id": "0"
            },
            {
                "bbox": [
                    354.0,
                    10.0,
                    56.0,
                    49.0
                ],
                "bbox_mode": 1,
                "category_id": "0"
            }
        ]
    },
    {
        "image_id": 225,
        "file_name": "img2.jpg",
        "height": 512,
        "width": 512,
        "annotations": [
            {
                "bbox": [
                    374.0,
                    397.0,
                    64.0,
                    64.0
                ],
                "bbox_mode": 1,
                "category_id": "0"
            }
        ]
    }
]
Share
Improve this answer
Follow
answered Sep 15, 2021 at 7:39
user avatar
Niel Godfrey Ponciano
8,51011 gold badge1414 silver badges2929 bronze badges
1
Thank you. Your solution works ideally as needed and very fast. – 
linasster
 Sep 16, 2021 at 14:13
Add a comment

Report this ad

1

The problem seems just that you need to filter annotations based on image_id

with open(json_file) as f:
    dataset_dicts = json.load(f)
    
for image in dataset_dicts["images"]:       
    image["annotations"] = [dict(**a, bbox_mode=1) for a in dataset_dicts['annotations'] if a['image_id'] == image['id']]    

with open("python/new_json.json", "w") as f:
    json.dump(dataset_dicts["images"], f)
Share
Improve this answer
Follow


++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++



How to modify a JSON file in a script?
Asked 4 years, 10 months ago
Modified 4 years, 10 months ago
Viewed 5k times

Report this ad

0


I am trying to edit Chrome's preferences using command line. The file is a JSON file and I want to edit the data below:

{"browser":{"last_redirect_origin":""}}
to

{"browser":{"enabled_labs_experiments":["ssl-version-max@2"],"last_redirect_origin":""}}
I was using sed command earlier to accomplish this but want to know how this can be done using python. This was the command I was using:

sed -i '.bak' -e 's|\(\"browser\"\):{\(\".*origin\":\"\"\)}|\1:{\"enabled_labs_experiments\":[\"ssl-version-max@2\"],\2}|' ~/Library/Application\ Support/Google/Chrome/Local\ State
The reason I can't use jq is that it is not native to macs and will need installation. I am not able to understand how to do this with python.

I will really appreciate it if someone could help me with this or point me in the right direction.

EDIT

This is what my python script looks like:

import json
jsonData = json.loads(open('/Users/username/Library/Application Support/Google/Chrome/Local state').read())
if 'enabled_labs_experiments' in jsonData['browser']:
    if 'ssl-version-max@2' in jsonData['browser']['enabled_labs_experiments']:
        print('Exist')
    else:
        jsonData['browser']['enabled_labs_experiments'] = ['ssl-version-max@2']
        print('Added')
After the changes are made, I would like to commit the changes to the file.

python
json
macos
sed
Share
Improve this question
Follow
edited Jun 8, 2017 at 5:38
asked Jun 8, 2017 at 5:07
user avatar
LuciDroid
5511 silver badge77 bronze badges
don't use 'open(filename.read())'. Use with context instead. see my answer. – 
Rahul
 Jun 8, 2017 at 5:40 
@Rahul Thank you! it does exactly what I need. However, it changes the formatting a bit. Is there a way to keep the formatting intact? Here is the file if you would like to take a look: drive.google.com/file/d/0B38bjAmXWElZM3VqUkFadldndlk/… – 
LuciDroid
 Jun 8, 2017 at 6:04
Add a comment
2 Answers
Sorted by:

Highest score (default)

3

Why are you using regex why are you not using the built in json module in python?

import json
d = json.loads(path_to_your_file)
d["browser"]["enabled_labs_experiments"] = ["ssl-version-max@2"]
Share
Improve this answer
Follow
edited Jun 8, 2017 at 5:19
user avatar
Taku
28k1111 gold badges6565 silver badges7575 bronze badges
answered Jun 8, 2017 at 5:11
user avatar
e4c5
50.4k1010 gold badges9393 silver badges127127 bronze badges
@lucidroid to add to this answer, the json module also has functions to write to to new files (and thus obviously edit the file too) - have a read of the docs page e4c5 linked to. – 
user3089519
 Jun 8, 2017 at 5:15
@e4c5 That was when I was trying to achieve it in a bash script. Now I am trying to achieve the same in a python script. – 
LuciDroid
 Jun 8, 2017 at 5:21 
Well then here is the answer :) – 
e4c5
 Jun 8, 2017 at 5:25
@e4c5 Thank you :) Added my python script to the post. Not really sure what's wrong here. – 
LuciDroid
 Jun 8, 2017 at 5:33
1
Sorry you asked a question and I asnwered that and so did the other user. Now your edit makes it a completely different question. So you should really post it as a different question. – 
e4c5
 Jun 8, 2017 at 5:35
Show 1 more comment

Report this ad

2

import json
with open(path_to_json_file) as f:
    data = f.read()
d = json.loads(data)
d["browser"]["enabled_labs_experiments"] = ["ssl-version-max@2"]
with open(path_to_json_file, 'w') as f:
    f.write(json.dumps(d))
